	//Aggregation//
	----------------
	1. Revising Aggregations - The Count Function.    /* 
														Query a count of the number of cities in CITY having 
														a Population larger than 100,000. 
													  */	
SELECT COUNT(*) 
FROM CITY 
WHERE POPULATION>100000
-------------------------------------------------

	2. Revising Aggregations - The Sum Function.  /*
													Query the total population of all cities in CITY where 
													District is California.
												  */
SELECT SUM(POPULATION) 
FROM CITY 
WHERE DISTRICT='California'
-------------------------------------------------

	3. Revising Aggregations - Averages.    /* 
												Query the average population of all cities in CITY where 
												District is California.
											*/
SELECT AVG(POPULATION) 
FROM CITY 
WHERE DISTRICT='California'
-------------------------------------------------
 
 	4. Average Population.    /*
		 						Query the average population for all cities in CITY, rounded down to 
		 						the nearest integer.
		 					  */
SELECT FLOOR(AVG(POPULATION)) 
FROM CITY
-------------------------------------------------
 
 	5. Japan Population.  /*
				 			Query the sum of the populations for all Japanese cities in CITY. 
				 			The COUNTRYCODE for Japan is JPN.
				 		  */
SELECT SUM(POPULATION) 
FROM CITY 
WHERE COUNTRYCODE='JPN'
-------------------------------------------------
 
 	6. Population Density Difference.  /*
				 						  Query the difference between the maximum and minimum populations in CITY.
				 					   */
SELECT MAX(POPULATION)-MIN(POPULATION) 
FROM CITY
-------------------------------------------------
 
 	7. Top Earners. /*
						We define an employee's total earnings to be their monthly 
						worked, and the maximum total earnings to be the maximum 
						total earnings for any employee in the Employee table. Write 
						a query to find the maximum total earnings for all employees 
						as well as the total number of employees who have maximum 
						total earnings. Then print these values as  space-separated 
						integers.
					*/
-- WITH cte1 AS (SELECT salary*months, COUNT(*) FROM Employee WHERE ),
--      cte2 AS (SELECT MAX(months*salary) FROM Employee))
SELECT MAX(salary*months), COUNT(*) 
FROM Employee 
WHERE salary*months=
(SELECT MAX(salary*months) 
FROM Employee)
-------------------------------------------------
 
 	8. Weather Observation Station 2.   /*
						 					Query the following two values from the STATION table:
						 					The sum of all values in LAT_N rounded to a scale of 2 decimal places.
						 					The sum of all values in LONG_W rounded to a scale of 2 decimal places.
						 				*/
SELECT ROUND(SUM(LAT_N), 2), ROUND(SUM(LONG_W), 2) 
FROM STATION
-------------------------------------------------
 
 	9. Weather Observation Station 13.   /*
						 					Query the sum of Northern Latitudes (LAT_N) from STATION having values 
						 					greater than  and less than . Truncate your answer to  decimal places.
						 				*/
SELECT ROUND(SUM(LAT_N), 4) 
FROM STATION 
WHERE LAT_N>38.7800 AND LAT_N<137.2345
-------------------------------------------------
 
 	10. Weather Observation Station 14.   /*
						 					Query the greatest value of the Northern Latitudes (LAT_N) from STATION 
						 					that is less than . Truncate your answer to  decimal places.
						 				 */
SELECT ROUND(MAX(LAT_N), 4) 
FROM STATION 
WHERE LAT_N<137.2345
-------------------------------------------------
 
 	11. Weather Observation Station 15.   /*
						 					Query the Western Longitude (LONG_W) for the largest Northern Latitude 
						 					(LAT_N) in STATION that is less than . Round your answer to  decimal places.
						 				 */
SELECT ROUND(LONG_W, 4) 
FROM STATION 
WHERE LAT_N = 
(SELECT MAX(LAT_N) 
FROM STATION WHERE LAT_N<137.2345)
-------------------------------------------------
 
 	12. Weather Observation Station 16.   /*
						 					Query the smallest Northern Latitude (LAT_N) from STATION that is 
						 					greater than . Round your answer to  decimal places.
						 				 */
SELECT ROUND(MIN(LAT_N), 4) 
FROM STATION 
WHERE LAT_N>38.778
-------------------------------------------------
 
 	12. Weather Observation Station 17.   /*
						 					Query the Western Longitude (LONG_W)where the smallest Northern Latitude 
						 					(LAT_N) in STATION is greater than . Round your answer to  decimal places.
						 				 */
SELECT ROUND(LONG_W, 4) 
FROM STATION 
WHERE LAT_N IN 
(SELECT MIN(LAT_N) 
FROM STATION 
WHERE LAT_N>38.778) 
-------------------------------------------------
 
 	13. Weather Observation Station 18.   /*
						 					Consider P(a,b) and P(c,d) to be two points on a 2D plane.
						 						-a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
						 						-b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
						 						-c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
						 						-d happens to equal the maximum value in Western Longitude (LONG_W in STATION).
						 					Query the Manhattan Distance between points  and  and round it to a scale of  
						 					decimal places.
						 			 	 */
SELECT ROUND
((MAX(LAT_N)-MIN(LAT_N)) 
+ 
(MAX(LONG_W )-MIN(LONG_W)), 
4) 
FROM STATION
-------------------------------------------------
 
 	14. Weather Observation Station 19.   /*
						 					Consider P(a,b) and P(c,d) to be two points on a 2D plane where a,b are the 
						 					respective minimum and maximum values of Northern Latitude 
						 					(LAT_N) and c,d are the respective minimum and maximum values of 
						 					Western Longitude (LONG_W) in STATION.
						 					Query the Euclidean Distance between points P1 and P2 and format 
						 					your answer to display  decimal digits.
						 			 	 */
SELECT ROUND
            (SQRT
                (POWER
                      (
                          (MAX(LAT_N)-MIN(LAT_N)), 
                      2)
                    +
                 POWER
                      (
                          (MAX(LONG_W)-MIN(LONG_W)), 
                       2)), 
                 4) FROM STATION
-------------------------------------------------
 
 	15. The Blunder.   	/*
							Samantha was tasked with calculating the average monthly salaries for 
							all employees in the EMPLOYEES table, but did not realize her keyboard's  
							key was broken until after completing the calculation. She wants your 
							help finding the difference between her miscalculation (using salaries 
							with any zeros removed), and the actual average salary.
							Write a query calculating the amount of error (i.e.:  average monthly 
							salaries), and round it up to the next integer.
					 	 */
SELECT CEILING(AVG(Salary) - AVG(REPLACE(Salary, 0, '')))
FROM EMPLOYEES 
-------------------------------------------------
 
 	16. Weather Observation Station 20.   /*
											A median is defined as a number separating the higher half 
											of a data set from the lower half. Query the median of the 
											Northern Latitudes (LAT_N) from STATION and round your answer 
											to  decimal places.
										  */
WITH cte AS 
(SELECT ID, LAT_N, @row:=@row+1 AS row_num 
 FROM STATION
 CROSS JOIN (SELECT @row:=0) AS row_null
 ORDER BY LAT_N)
SELECT ROUND(LAT_N,4)
FROM cte
WHERE cte.row_num=(SELECT ROUND(COUNT(LAT_N)/2) FROM STATION)
-- OR
-- cte.row_num=(
--     SELECT ((ROUND(COUNT(LAT_N)/2)+ROUND(COUNT(LAT_N)+1)/2)/2) FROM STATION
--     );
// Находит медиану только для нечетного количества значений

