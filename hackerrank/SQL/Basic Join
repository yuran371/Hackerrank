	//Basic Join//
	----------------
	1. Population Census.  /* 
						 	 Given the CITY and COUNTRY tables, query the sum of the 
						 	 populations of all cities where the CONTINENT is 'Asia'.
						   */	
SELECT SUM(CI.POPULATION) 
FROM CITY CI 
JOIN  COUNTRY CO 
ON CI.CountryCode=CO.Code 
WHERE CO.CONTINENT='Asia'
-------------------------------------------------

	2. African Cities.  /*
					 	  Query the NAME field for all American cities in the CITY table with populations 
						  larger than 120000. The CountryCode for America is USA.
					    */
SELECT CI.NAME 
FROM CITY CI 
JOIN COUNTRY CO 
ON CI.CountryCode=CO.Code 
WHERE CO.CONTINENT='Africa'
-------------------------------------------------

	3. Average Population of Each Continent.    /* 
													Given the CITY and COUNTRY tables, query the names of all the 
													continents (COUNTRY.Continent) and their respective average 
													city populations (CITY.Population) rounded down to the nearest 
													integer.
												*/
SELECT CO.CONTINENT, FLOOR(AVG(CI.POPULATION)) 
FROM CITY CI 
JOIN COUNTRY CO 
ON CI.CountryCode=CO.Code 
GROUP BY CO.CONTINENT
-------------------------------------------------
 
 	4. The Report.    /*
 						You are given two tables: Students and Grades. 
 						Students contains three columns ID, Name and Marks.
 					  */
SELECT CASE WHEN g.Grade>=8 THEN s.NAME ELSE 'NULL' END, g.Grade, s.Marks 
FROM Students s 
JOIN Grades g ON (s.Marks>=g.Min_Mark AND s.Marks<=g.Max_Mark) 
ORDER BY g.Grade DESC, s.Name
-------------------------------------------------
 
 	5. Top Competitors.  /*
							Julia just finished conducting a coding contest, and she needs 
							your help assembling the leaderboard! Write a query to print the 
							respective hacker_id and name of hackers who achieved full scores 
							for more than one challenge. Order your output in descending order 
							by the total number of challenges in which the hacker earned a full 
							score. If more than one hacker received full scores in same number 
							of challenges, then sort them by ascending hacker_id.
						 */
SELECT h.hacker_id, h.name FROM Submissions s 
JOIN Hackers h ON s.hacker_id=h.hacker_id 
JOIN Challenges c ON s.challenge_id=c.challenge_id 
JOIN Difficulty d ON c.difficulty_level=d.difficulty_level 
WHERE s.score=d.score 
GROUP BY h.hacker_id, h.name
HAVING COUNT(s.challenge_id)>=2
ORDER BY count(s.hacker_id) DESC, s.hacker_id ASC;
-------------------------------------------------
 
 	6. Ollivander's Inventory.  /*
				 					Harry Potter and his friends are at Ollivander's with Ron, 
				 					finally replacing Charlie's old broken wand.
									Hermione decides the best way to choose is by determining 
									the minimum number of gold galleons needed to buy each non-evil 
									wand of high power and age. Write a query to print the id, age, 
									coins_needed, and power of the wands that Ron's interested in, 
									sorted in order of descending power. If more than one wand has 
									same power, sort the result in order of descending age.
				 				*/
SELECT w.id, wp.age, w.coins_needed, w.power 
FROM Wands_Property wp 
JOIN Wands w 
ON wp.code=w.code
WHERE wp.is_evil=0 
AND
w.coins_needed=
(SELECT w1.coins_needed 
FROM Wands w1 
JOIN Wands_Property wp1 
WHERE w1.code=w.code 
AND 
w.power=w1.power 
AND 
wp.age=wp1.age 
ORDER BY w1.coins_needed 
LIMIT 1)
ORDER BY w.power DESC, wp.age DESC;
-------------------------------------------------
 
 	7. Contest Leaderboard.   /*
					    		 You did such a great job helping Julia with her last coding 
					    		 contest challenge that she wants you to work on this one, too!
					    		 The total score of a hacker is the sum of their maximum scores 
					    		 for all of the challenges. Write a query to print the hacker_id, 
					    		 name, and total score of the hackers ordered by the descending 
					    		 score. If more than one hacker achieved the same total score, 
					    		 then sort the result by ascending hacker_id. Exclude all hackers 
					    		 with a total score of  from your result.					    	  
					    	   */
SELECT h.hacker_id, qwe.name, SUM(qwe.max1) AS sum1
FROM Hackers h
JOIN (
    SELECT s1.hacker_id AS hacker_id, h1.name AS name,
                 s1.challenge_id, MAX(s1.score) as max1
    FROM Hackers h1
    JOIN Submissions s1 ON s1.hacker_id = h1.hacker_id
    GROUP BY s1.challenge_id, s1.hacker_id, h1.name
) AS qwe 
ON h.hacker_id= qwe.hacker_id 
GROUP BY h.hacker_id, qwe.name
HAVING sum1 > 0
ORDER BY sum1 DESC, h.hacker_id ASC;
-------------------------------------------------
 
 	8. Challenges.   /*
					   Julia asked her students to create some coding challenges. 
					   Write a query to print the hacker_id, name, and the total 
					   number of challenges created by each student. Sort your 
					   results by the total number of challenges in descending 
					   order. If more than one student created the same number of 
					   challenges, then sort the result by hacker_id. If more than 
					   one student created the same number of challenges and the 
					   count is less than the maximum number of challenges created, 
					   then exclude those students from the result.					    	  
					 */  Условия: Если пара одинаковых, то =max значению
					 			  Если не пара, то просто печатаем
WITH cte AS 
(
    SELECT COUNT(c.challenge_id) AS coun
           FROM Challenges c
           GROUP BY c.hacker_id
           ORDER BY coun DESC
),
cte1 AS 
(
    SELECT MAX(cte.coun) AS max_cte1
    FROM cte
 ),
 cte2 AS
 (
     SELECT cte.coun AS coun_cte2
     FROM cte
     GROUP BY cte.coun
     HAVING COUNT(cte.coun)=1
 )
SELECT h.hacker_id, h.name, COUNT(c.challenge_id) AS coun_main
FROM Hackers h 
JOIN Challenges c
USING (hacker_id)
GROUP BY h.hacker_id, h.name
HAVING
coun_main IN (SELECT cte2.coun_cte2 FROM cte2)
OR
coun_main = (SELECT cte1.max_cte1 FROM cte1)
ORDER BY coun_main DESC, h.hacker_id ASC;
 
