	//Advanced Join//
	----------------
	1. SQL Project Planning.  /* 
								You are given a table, Projects, containing three columns: 
								Task_ID, Start_Date and End_Date. It is guaranteed that the 
								difference between the End_Date and the Start_Date is equal 
								to 1 day for each row in the table.
							  */	
WITH cte_1 AS 
(SELECT Start_Date, ROW_NUMBER() OVER (ORDER BY Start_Date) AS row_n 
 FROM Projects
 WHERE Start_Date NOT IN (SELECT End_Date FROM Projects)
 ORDER BY Start_Date),
cte_2 AS
(SELECT End_Date, ROW_NUMBER() OVER (ORDER BY End_Date) AS row_n
 FROM Projects
 WHERE End_Date NOT IN (SELECT Start_Date FROM Projects)
 ORDER BY End_Date)
SELECT cte_1.Start_Date, cte_2.End_Date 
FROM cte_1
JOIN cte_2 USING(row_n)
ORDER BY End_Date-Start_Date ASC, Start_Date;

-- SELECT Start_Date, ROW_NUMBER() OVER (ORDER BY Start_Date)  
--  FROM Projects
--  WHERE Start_Date NOT IN (SELECT End_Date FROM (SELECT End_Date FROM Projects AS pr1 WHERE Start_Date<>End_Date) AS sel1) 
--  ORDER BY Start_Date;
 
--  SELECT End_Date, ROW_NUMBER() OVER (ORDER BY End_Date) 
--  FROM Projects
--  WHERE End_Date NOT IN (SELECT Start_Date FROM (SELECT Start_Date FROM Projects AS pr1 WHERE Start_Date<>End_Date) AS sel1) 
--  ORDER BY End_Date
	----------------
	2. Placements.  /* 
						You are given three tables: Students, Friends and Packages. 
						Students contains two columns: ID and Name. Friends contains 
						two columns: ID and Friend_ID (ID of the ONLY best friend). 
						Packages contains two columns: ID and Salary (offered salary 
						in $ thousands per month).
					*/	
SELECT s.Name 
FROM Students s
JOIN Friends f
USING (ID)
JOIN Packages p1
ON p1.ID=f.ID
JOIN Packages p2
ON p2.ID=f.Friend_ID
WHERE p1.Salary<p2.Salary
ORDER BY p2.Salary
	----------------
	3. Placements.  /* 
						Two pairs (X1, Y1) and (X2, Y2) are said to be symmetric pairs if X1 = Y2 
						and X2 = Y1. Write a query to output all such symmetric pairs in ascending 
						order by the value of X. List the rows such that X1 â‰¤ Y1
					*/	
WITH cte AS
(
    SELECT X, Y, ROW_NUMBER() OVER (ORDER BY X, Y) AS ID
    FROM Functions f
)
-- ,
-- cte_Y AS 
-- (
--     SELECT X, Y, ROW_NUMBER() OVER (ORDER BY X, Y) AS ID
--     FROM Functions f
-- )
SELECT DISTINCT cte1.X, cte1.Y
FROM cte AS cte1
JOIN cte AS cte2 ON cte1.X = cte2.Y AND cte1.Y = cte2.X 
WHERE
cte1.ID != cte2.ID
AND
cte1.X <= cte1.Y
ORDER BY cte1.X, cte1.Y
